import * as React from 'react';
import { Row, Card, Form, InputGroup, Button } from 'react-bootstrap';
import { toast } from 'react-toastify';
import { Redirect } from 'react-router-dom';
import axios from 'axios';

import ProcessingLoader from 'components/ProcessingLoader';

export default class Register extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      processing: false,
      username: '',
      role: Role.SELLER
    };

    this.handleSubmit = this.handleSubmit.bind(this);
    this.handleChangeUsername = this.handleChangeUsername.bind(this);
    this.handleClickBuyer = this.handleClickBuyer.bind(this);
    this.handleClickSeller = this.handleClickSeller.bind(this);

    this.config = new Config();
  }

  componentWillMount() {
    const { handleSignin } = this.props;
    axios
      .get(`${this.config.restServer.url}/wallet`, { withCredentials: true })
      .then(async res => {
        console.log(res);
        if (res.data.length > 0) {
          try {
            const { data } = await axios.get(`${this.config.restServer.url}/system/ping`, {
              withCredentials: true
            });
            const { participant } = data;
            let $class, id;
            [$class, id] = participant.split('#');
            const role = $class
              .split('.')
              .slice(-1)
              .pop();
            handleSignin(id, role);
          } catch (err) {
            toast.error(err);
          }
        } else {
          handleSignin();
        }
      })
      .catch(err => {
        if (!err.response || !err.response.status === 401) {
          toast.error(err);
        }
        console.log(err.response);
      });
  }

  handleChangeUsername(evt) {
    this.setState({
      username: evt.target.value
    });
  }

  handleClickBuyer() {
    this.setState({
      role: Role.BUYER
    });
  }

  handleClickSeller() {
    this.setState({
      role: Role.SELLER
    });
  }

  handleSubmit() {
    const { handleSignup } = this.props;
    const { username, role } = this.state;
    this.setState({
      processing: true
    });

    const successHandler = () => {
      this.props.history.push('/');
    };

    const errorHandler = err => {
      toast.error('Unable to register: ' + err);
      this.setState({
        processing: false
      });
    };

    handleSignup(username, role, successHandler, errorHandler);
  }

  render() {
    const { role } = this.state;
    const { state } = this.props;
    if (!state.loggedIn || state.user) {
      return <Redirect to="/" />;
    }
    return (
      <Row className="justify-content-center">
        <Card style={{ width: '18em' }}>
          <Card.Body>
            <Form>
              <Form.Group>
                <Form.Label>Username</Form.Label>
                <Form.Control
                  placeholder="Enter your username"
                  onChange={this.handleChangeUsername}
                  value={this.state.username}
                />
              </Form.Group>
              <Form.Group>
                <Form.Label>Role</Form.Label>
                <InputGroup>
                  <InputGroup.Prepend>
                    <Button
                      size="sm"
                      onClick={this.handleClickSeller}
                      variant={role === Role.SELLER ? 'primary' : 'outline-secondary'}
                    >
                      Seller
                    </Button>
                  </InputGroup.Prepend>
                  <InputGroup.Append>
                    <Button
                      size="sm"
                      onClick={this.handleClickBuyer}
                      variant={role === Role.BUYER ? 'primary' : 'outline-secondary'}
                    >
                      Buyer
                    </Button>
                  </InputGroup.Append>
                </InputGroup>
              </Form.Group>
              <Button
                className="mt-3"
                disabled={this.state.processing || !this.state.username}
                onClick={this.handleSubmit}
              >
                {this.state.processing ? (
                  <ProcessingLoader />
                ) : (
                  <>Sign up</>
                )}
              </Button>
            </Form>
          </Card.Body>
        </Card>
      </Row>
    );
  }
}
